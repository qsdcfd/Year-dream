{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "BST",
      "provenance": [],
      "authorship_tag": "ABX9TyMbuDMKsim8L2kS/WTI9KLx"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "class Node: #노드 클래스\n",
        "    def __init__(self, val, left=None, right=None): #val인자 설정, left,  right 초기화\n",
        "        self.val = val #value할당\n",
        "        self.left = left #초기화된 left 할당\n",
        "        self.right = right # 초기화도니 right할당\n",
        "\n"
      ],
      "metadata": {
        "id": "ysDAwjfQ35rE"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class BinarySearchTree: #이진탐색트리\n",
        "    def __init__(self):\n",
        "        self.root = None #루트 값 초기화\n",
        "        self._size = 0 #각 레벨 별 숫자들 초기화 \n",
        "\n",
        "    def insert_node(self, node, val): #노드 삽입 위치 함수: node와 value가 인자\n",
        "        if node is None: #노드에 아무것도 없다면\n",
        "            return Node(val) #val값을 출력\n",
        "        if val < node.val: #value가 노드값보다 작다면\n",
        "            node.left = self.insert_node(node.left, val) #왼쪽 노드에 삽입할 것\n",
        "        elif val > node.val: # 크다면\n",
        "            node.right = self.insert_node(node.right, val) #오른쪽 노드에 삽입할 것\n",
        "        return node #최종 결과 반환\n",
        "\n",
        "    def size(self): #사이즈 함수\n",
        "        return self._size # 사이즈 반환\n",
        "\n",
        "    def insert(self, val): #삽입 함수\n",
        "        self.root = self.insert_node(self.root, val) #root에 노드 값 넣기\n",
        "        self._size += 1 #사이즈 1 증가\n",
        "\n",
        "    def contains(self, val): # val가 잘 들어갔나 학인 함수\n",
        "        return self.contains_node(self.root, val) #노드 값이 잘 들어갔나 확인\n",
        "\n",
        "    def contains_node(self, node, val): #node가 잘 들어갔나 확인하는 함수\n",
        "        if node is None: #node가 비어있다면 \n",
        "            return False #  잘 안 들어간 거니까 false반환\n",
        "        if val == node.val: #값이 일치한다면\n",
        "            return True #잘 들어간거니까 true\n",
        "        if val < node.val: #값이 더 작ㄷ면\n",
        "            return self. contains_node(node.left, val) #왼쪽 서브트리에 삽입\n",
        "        return self.contains_node(node.right, val) # 오른쪽 서브 트리에 삽입\n",
        "\n",
        "    def delete(self, val):#삭제할 위치 선정 함수\n",
        "        return self.delete_node(self.root, val)#root값 삭제\n",
        "\n",
        "    def delete_node(self, node, val): #노드 삭제 함수\n",
        "        if node is None: #노드가 비어있다면\n",
        "            return None #None출력\n",
        "        \n",
        "        if val < node.val: #val이 작다면\n",
        "            node.left = self.delete_node(node.left, val) #왼쪽 삭제\n",
        "        elif val > node.val: # 크다면\n",
        "            node.right = self.delete_node(node.right, val)#오른쪽 삭제\n",
        "        else:\n",
        "            self._size -= 1 #삭제 했으니 사이즈 1 감소\n",
        "            if node.left is None: #왼쪽 서브 트리 노드가 비어있다면\n",
        "                return node.right #오른쪽 반환\n",
        "            elif node.right is None: # 오른쪽 서브 트리 노드가 비어있다면\n",
        "                return node.left #왼쪽 반환\n",
        "            node.val = self.min_node(node.right) #오른쪽엔 최소\n",
        "            node.right = self.delete_node(node.right, node.val) # 오른쪽 노드 삭제\n",
        "        return node #노드값 리턴\n",
        "\n",
        "    def min_node(node): #최소 노드\n",
        "        min_val = node.val #최소 값과 노드 값 같다면\n",
        "        while node.left is not None: #왼쪽 서브 노드는 비어있지 않다\n",
        "            min_val = node.left.val #왼쪽 서브 노드 부분이 최솟값\n",
        "            node = node.left #왼쪽 노드\n",
        "        return min_val # 최솟값 부분 출력\n",
        "\n",
        "    def preorder(self): #preorder\n",
        "        ret = [] #빈 리스트 형성\n",
        "\n",
        "        def visit(root): #방문하는 함수, 노드를 거쳐서 preorder만들기\n",
        "            nonlocal ret #중첩함수 변수로 사용(아래 if)\n",
        "            if root is None:  #root가 비어있다면\n",
        "                return ret #ret반환\n",
        "            ret.append(root.val) #root에 val삽입\n",
        "            visit(root.left) #left방문하여 있나 확인\n",
        "            visit(root.right)#right 방문하여 있나 확인\n",
        "        visit(self.root)#잘 들어갔나 확인\n",
        "        return ret #ret반환\n",
        "\n",
        "    def inorder(self):# inorder만들기\n",
        "        ret = [] #빈 리스트 형성\n",
        "\n",
        "        def visit(root):#방문하는 함수, 노드를 거쳐서 inorder만들기\n",
        "            nonlocal ret#중첩함수 변수로 사용(아래 if)\n",
        "            if root is None:#root가 비어있다면\n",
        "                return ret#ret반환\n",
        "            visit(root.left)# #left방문하여 있나 확인\n",
        "            ret.append(root.val)#root에 val삽입\n",
        "            visit(root.right)#right 방문하여 있나 확인\n",
        "        visit(self.root)#잘 들어갔나 확인\n",
        "        return ret#ret반환\n",
        "\n",
        "    def postorder(self):# postorder만들기\n",
        "        ret = []#빈 리스트 형성\n",
        "\n",
        "        def visit(root):#방문하는 함수, 노드를 거쳐서 postorder만들기\n",
        "            if root is None:#root가 비어있다면\n",
        "                return ret#ret반환\n",
        "            visit(root.left)# #left방문하여 있나 확인\n",
        "            visit(root.right)#right 방문하여 있나 확인\n",
        "            ret.append(root.val)#root에 val삽입\n",
        "        \n",
        "        visit(self, root)#잘 들어갔나 확인\n",
        "        return ret#ret반환\n"
      ],
      "metadata": {
        "id": "8tOWWw_64SRc"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cUyc8Knxy4HD",
        "outputId": "1b5b437b-cfed-4ef1-f921-7ca28f0dcad7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "btree.insert(3)\n",
            "btree.size(): 1\n",
            "btree.insert(1)\n",
            "btree.size(): 2\n",
            "btree.insert(2)\n",
            "btree.size(): 3\n",
            "btree.insert(3)\n",
            "btree.size(): 4\n",
            "btree.insert(8)\n",
            "btree.size(): 5\n",
            "btree.insert(7)\n",
            "btree.size(): 6\n",
            "==================================\n",
            "btree.contains(3): True\n",
            "btree.contains(1): True\n",
            "btree.contains(2): True\n",
            "btree.contains(3): True\n",
            "btree.contains(8): True\n",
            "btree.contains(7): True\n",
            "===================================\n",
            "btree.preorder(): [3, 1, 2, 8, 7]\n",
            "btree.inorder(): [1, 2, 3, 7, 8]\n",
            "btree.postorder(): [2, 1, 7, 8, 3]\n",
            "=====================================\n",
            "btree.delete(2)\n",
            "btree.delete(8)\n",
            "btree.size(): 4\n",
            "==================================\n",
            "btree.contains(3): True\n",
            "btree.contains(1): True\n",
            "btree.contains(2): False\n",
            "btree.contains(3): True\n",
            "btree.contains(8): False\n",
            "btree.contains(7): True\n",
            "===================================\n",
            "btree.preorder(): [3, 1, 7]\n",
            "btree.inorder(): [1, 3, 7]\n",
            "btree.postorder(): [1, 7, 3]\n",
            "=====================================\n"
          ]
        }
      ],
      "source": [
        "if __name__ == \"__main__\":\n",
        "    btree = BinarySearchTree()\n",
        "    for i in [3, 1, 2, 3, 8, 7]:\n",
        "        print(f\"btree.insert({i})\")\n",
        "        btree.insert(i)\n",
        "        print(f\"btree.size(): {btree.size()}\")\n",
        "\n",
        "    print(\"==================================\")\n",
        "    for i in [3, 1, 2, 3, 8, 7]:\n",
        "        print(f\"btree.contains({i}): {btree.contains(i)}\")\n",
        "\n",
        "    print(\"===================================\")\n",
        "    print(f\"btree.preorder(): {btree.preorder()}\")\n",
        "    print(f\"btree.inorder(): {btree.inorder()}\")\n",
        "    print(f\"btree.postorder(): {btree.postorder()}\")\n",
        "    print(\"=====================================\")\n",
        "\n",
        "    print(\"btree.delete(2)\")\n",
        "    btree.delete(2)\n",
        "    print(\"btree.delete(8)\")\n",
        "    btree.delete(8)\n",
        "    print(f\"btree.size(): {btree.size()}\")\n",
        "\n",
        "    print(\"==================================\")\n",
        "    for i in [3, 1, 2, 3, 8, 7]:\n",
        "        print(f\"btree.contains({i}): {btree.contains(i)}\")\n",
        "\n",
        "    print(\"===================================\")\n",
        "    print(f\"btree.preorder(): {btree.preorder()}\")\n",
        "    print(f\"btree.inorder(): {btree.inorder()}\")\n",
        "    print(f\"btree.postorder(): {btree.postorder()}\")\n",
        "    print(\"=====================================\")"
      ]
    }
  ]
}